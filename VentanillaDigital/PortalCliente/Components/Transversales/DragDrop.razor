@using BlazorInputFile

<div class="row">
    <div class="col-12">
        <div class="dropzone @dropClass rounded input-file col-12" >
            <InputFile id="fileInput" multiple title=""
                       OnChange="HandleFileInputChange"
                       accept=@FilesAccept
                       @ondragenter="HandleDragEnter"
                       @ondragleave="HandleDragLeave" />
            <BSImage IsRounded="true" src="images/agregarArchivo.PNG"> </BSImage>
            <br />
            <p class="text-input-file">@MsgInputFile</p>
        </div>
        @if ((fileTypeError || fileSizeError))
        {
            <ul class="validation-errors mb-0">
                @if (fileTypeError)
                {
                    <li class="validation-message">Solo se aceptan archivos PDF</li>
                }
                @if (fileSizeError)
                {
                    <li class="validation-message">El tamano de archivo máximo permitido es @MaxFileSizeMB MB.</li>
                }
            </ul>
        }
        <br /><br />
        @if (selectedFiles != null && selectedFiles.Count > 0)
        {
            <div class="col-12">
                <BSTable IsStriped="true">
                    <tbody>
                        @foreach (var file in selectedFiles)
                        {
                            <tr>
                                <td>
                                <BSImage IsRounded="true" src="images/pdf-icon.PNG"> </BSImage>
                                @file.Name</td>
                                <td><BSImage IsRounded="true" src="images/trash-icon.jpg" @onclick="@(e => RemoveFile(file))">
    <small class="align-text-bottom">Remove</small>
</BSImage></td>
                                
                                @*<button class="btn btn-link text-danger p-0 pl-1" type="button"*@
                                @*@onclick="@(e => RemoveFile(file))">*@

                                @*</button>*@
                             </tr>
                            }
                    </tbody>
                </BSTable>
</div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string MsgInputFile { get; set; }
    [Parameter]
    public string FilesAccept { get; set; }

    const int MaxFileSizeMB = 5;
    const int MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB
    private string dropClass = "";
    private bool fileSizeError = false;
    private bool fileTypeError = false;
    private List<IFileListEntry> selectedFiles = new List<IFileListEntry>();

    private void HandleDragEnter()
    {
        dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleFileInputChange(IFileListEntry[] files)
    {
        dropClass = "";
        fileSizeError = false;
        fileTypeError = false;
        List<string> acceptedFileTypes = new List<string>() { FilesAccept};
        if (files != null)
        {
            foreach (var file in files)
            {
                bool error = false;
                if (file.Size > MaxFileSize)
                {
                    error = true;
                    fileSizeError = true;
                }

                if (!acceptedFileTypes.Contains(file.Type))
                {
                    error = true;
                    fileTypeError = true;
                }

                //keep the good files
                if (!error)
                {
                    selectedFiles.Add(file);
                }
            }
        }
    }

    private void RemoveFile(IFileListEntry file)
    {
        selectedFiles.Remove(file);
    }
}
